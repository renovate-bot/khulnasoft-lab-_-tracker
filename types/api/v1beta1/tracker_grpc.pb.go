// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: types/api/v1beta1/tracker.proto

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackerServiceClient is the client API for TrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerServiceClient interface {
	GetEventDefinition(ctx context.Context, in *GetEventDefinitionRequest, opts ...grpc.CallOption) (*GetEventDefinitionResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type trackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerServiceClient(cc grpc.ClientConnInterface) TrackerServiceClient {
	return &trackerServiceClient{cc}
}

func (c *trackerServiceClient) GetEventDefinition(ctx context.Context, in *GetEventDefinitionRequest, opts ...grpc.CallOption) (*GetEventDefinitionResponse, error) {
	out := new(GetEventDefinitionResponse)
	err := c.cc.Invoke(ctx, "/tracker.v1beta1.TrackerService/GetEventDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/tracker.v1beta1.TrackerService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackerServiceServer is the server API for TrackerService service.
// All implementations must embed UnimplementedTrackerServiceServer
// for forward compatibility
type TrackerServiceServer interface {
	GetEventDefinition(context.Context, *GetEventDefinitionRequest) (*GetEventDefinitionResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	mustEmbedUnimplementedTrackerServiceServer()
}

// UnimplementedTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServiceServer struct {
}

func (UnimplementedTrackerServiceServer) GetEventDefinition(context.Context, *GetEventDefinitionRequest) (*GetEventDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventDefinition not implemented")
}
func (UnimplementedTrackerServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedTrackerServiceServer) mustEmbedUnimplementedTrackerServiceServer() {}

// UnsafeTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServiceServer will
// result in compilation errors.
type UnsafeTrackerServiceServer interface {
	mustEmbedUnimplementedTrackerServiceServer()
}

func RegisterTrackerServiceServer(s grpc.ServiceRegistrar, srv TrackerServiceServer) {
	s.RegisterService(&TrackerService_ServiceDesc, srv)
}

func _TrackerService_GetEventDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).GetEventDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.v1beta1.TrackerService/GetEventDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).GetEventDefinition(ctx, req.(*GetEventDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackerService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tracker.v1beta1.TrackerService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrackerService_ServiceDesc is the grpc.ServiceDesc for TrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracker.v1beta1.TrackerService",
	HandlerType: (*TrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventDefinition",
			Handler:    _TrackerService_GetEventDefinition_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _TrackerService_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/api/v1beta1/tracker.proto",
}
